name: Integration Tests

on:
  push:
    branches: [ main ]
  pull_request:
    branches: '*'
  workflow_dispatch:
    branches: '*'

jobs:
  build_and_test:
    name: CICD tests
    runs-on: ubuntu-latest
    steps:
    - name: Set up Go 1.x
      uses: actions/setup-go@v2
      with:
        go-version: ^1.14

    - name: Check out code into the Go module directory
      uses: actions/checkout@v2

    - name: Get dependencies
      run: |
        make justgenerate
        go get -v -t -d ./...
        if [ -f Gopkg.toml ]; then
            curl https://raw.githubusercontent.com/golang/dep/master/install.sh | sh
            dep ensure
        fi

    - name: Unit / L1 Test
      run: make l1

    - name: Upload Unit Test Results
      uses: actions/upload-artifact@v2
      if: always()
      with:
        name: test-results
        path: out/*_report.xml
        retention-days: 5

    - name: Publish Unit Test Results
      uses: EnricoMi/publish-unit-test-result-action@v1.6
      if: always()
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        files: out/*_report.xml

    - name: Build Images
      run: |
        BASE_VERSION=$(cat version.txt)
        export IMAGE_TAG=$BASE_VERSION.$(date -u '+%Y%m%d%H%M')
        echo $BASE_VERSION
        echo $IMAGE_TAG
        echo $IMAGE_TAG > IMAGE_TAG
        make cicd

    - name: Integration Tests (test mode off)
      run: make deploysingle integrationtests IMAGE_TAG=$(cat IMAGE_TAG)

    - name: Integration Tests (test mode on)
      env:
        TEST_MODE: true
      run: make deploysingle integrationtests IMAGE_TAG=$(cat IMAGE_TAG)

    - name: Collect Coverage
      run: make coveragereport

    - name: Upload Merged Test Results (Unit + Integration)
      uses: actions/upload-artifact@v2
      if: always()
      with:
        name: merged-test-results
        path: out/*_report.xml
        retention-days: 5

    - name: Publish Integration Test Results
      uses: EnricoMi/publish-unit-test-result-action@v1.6
      if: always()
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        files: out/*_report.xml

    - name: Deploy to DockerHub
      if: github.ref == 'refs/heads/main'
      env:
        DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
        DOCKERHUB_PASSWORD: ${{ secrets.DOCKERHUB_PASSWORD }}
      run: |
        export IMAGE_TAG=$(cat IMAGE_TAG)
        docker login -u $DOCKERHUB_USERNAME -p $DOCKERHUB_PASSWORD
        make tagAndPushToDockerHub

    - name: Collect Logs
      if: always()
      run: single_cluster_test/docker-logs.sh logs

    - name: Upload Logs
      if: always()
      uses: actions/upload-artifact@v2
      with:
        name: logs
        path: logs
        retention-days: 5
