openapi: 3.0.0
info:
  title: On Prem cloud side REST APIBridge REST API
  description: Cloud side service to move messages between on prem and cloud
  version: 1.0.0
  license:
    name: Apache

servers:
  - url: /bridge-server/1

paths:
  /about:
    get:
      summary: Get information about this API
      operationId: getAbout
      x-operationAlias: getAbout

      tags:
        - about
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AboutResponse'
  /register:
    get:
      summary: This endpoint allow the called to find a client ID/location ID based on the meta data assigned to it.
      description: This endpoint allow the called to find a client ID/location ID based on the meta data assigned to it.  The query string of key and value is how you search.  It is possible to get more than 1 value back based on how the meta data was applied
      parameters:
        - in: header
          name: x-Authorization
          description: Auth token used to authorized request
          schema:
            type: string
        - in: query
          name: filter
          description: a comma seperated list of metadata key=values to filter on
          schema:
            type: string
          required: true
      responses:
        '200':
          description: List of known clients
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetRegisterOnPremResponse'
        '401':
          description: Unauthorized

        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'


    post:
      summary: Registers an On Prem region
      description: Registers an On Prem region
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterOnPremReq'
          multipart/form-data:
            schema:
              type: object
              properties:
                authToken:
                  type: string
                metaData:
                  type: object
                  additionalProperties:
                    type: string

                publicKey:
                  type: string
                  format: binary
      responses:
        '201':
          description: registration accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegisterOnPremResponse'
        '400':
          description: Client input error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /unregister:
    post:
      summary: Unregisters an On Prem region
      description: Unregisters an On Prem region
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UnRegisterOnPremReq'
          multipart/form-data:
            schema:
              type: object
              properties:
                authToken:
                  type: string
                metaData:
                  type: string
      responses:
        '204':
          description: Unregistration OK
        '400':
          description: Client input error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /messages:
    post:
      summary: Posts a message to the NATS queue system as if it had come from services in the cloud.  Handy for mobile apps
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NatsMessageReq'
      responses:
        '202':
          description: Messages accepted
        '400':
          description: Bad juju happened
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseList'
        '401':
          description: Unauthorized, Invalid Auth Challenge

        '500':
          description: Bad juju happened
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /message-queue/{premid}:
    post:
      summary: Pushes pending messages to the bridge.
      parameters:
        - in: path
          name: premid
          required: true
          description: the premise ID
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BridgeMessagePostReq'
      responses:
        '202':
          description: Messages accepted
        '400':
          description: Bad juju happened
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseList'
        '401':
          description: Unauthorized, Invalid Auth Challenge

        '500':
          description: Bad juju happened
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    get:
      summary: Grabs messages from the cloud side for the given prem ID.
      description: This call will block for some timeout period (tbd, multiple seconds) waiting for messages.  If none are avilable, it will return an empty array
      parameters:
        - in: path
          name: premid
          required: true
          description: the premise ID
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthChallenge'
      responses:
        '200':
          description: Messages for the prem ID.  If not messages were available in the timeout period then an empty array is returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BridgeMessages'
        '400':
          description: Bad juju happened
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized, Invalid Auth Challenge

        '500':
          description: Bad juju happened
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

components:

  schemas:
    AuthChallenge:
      type: object
      properties:
        version:
          type: number
        authChallengeA:
          type: string
        authChellengeB:
          type: string

    NatsMessageReq:
      type: object
      description: This object represents a message to be added to the NATs queue as if the caller was inside the cluster
      properties:
        authToken:
          type: string
          description: An authorization token for a user that has permissions to post a message to NATS
        timeout:
          type: integer
          description: if a reply subject is provided, it will wait for this number of seconds for the reply, defaults to 30
          default: 30
        subject:
          type: string
          description: subject for the NATS messages
        reply:
          type: string
          description: optional reply message for nats.  If a reply is provided, the call will block for up to timeout seconds waiting for the reply
        data:
          type: string
          description: data for the message


    BridgeMessagePostReq:
      type: object
      properties:
        authChallenge:
          $ref: '#/components/schemas/AuthChallenge'
        messages:
          $ref: '#/components/schemas/BridgeMessages'

    BridgeMessages:
      type: array
      items:
        $ref: '#/components/schemas/BridgeMessage'

    UnRegisterOnPremReq:
      type: object
      properties:
        authToken:
          type: string
          description: the format of the auth token can be what ever is needed for authentication.  The auth service used on the back end will determine that.  In its simpliest form it is userID:Password
        metaData:
          type: string
          description: the meta data used to visually identify the user/on prem instance.  this string must be unique to the server but can be anything and be changed

    RegisterOnPremReq:
      type: object
      properties:
        authToken:
          type: string
          description: the format of the auth token can be what ever is needed for authentication.  The auth service used on the back end will determine that.  In its simpliest form it is userID:Password
        metaData:
          type: object
          additionalProperties:
            type: string
          description: the meta data used to visually identify the user/on prem instance.  this string must be unique to the server but can be anything and be changed
        publicKey:
          type: string
          description: Public key for the On Prem region
        keyID:
          type: string
          description: Public keyID for the On Prem region

    RegisterOnPremResponse:
      type: object
      properties:
        cloudPublicKey:
          type: string
        metaData:
          type: object
          additionalProperties:
            type: string
        premID:
          type: string
          description: An ID to use for all other calls of post and get messages

    GetRegisterOnPremResponse:
      type: array
      items:
        $ref: '#/components/schemas/RegisteredClientLocation'

    RegisteredClientLocation:
      type: object
      properties:
        premID:
          type: string
          description: An ID to use for all other calls of post and get messages
        metaData:
          type: object
          additionalProperties:
            type: string



    BridgeMessage:
      type: object
      properties:
        formatVersion:
          description: Format version of this message.  This indicates how the message is encrypted
          example: v1
          type: string
        clientID:
          type: string
        messageData:
          description: Encrypted message data.
          type: string

    ErrorResponseList:
      type: array
      items:
        $ref: '#/components/schemas/ErrorResponse'

    ErrorResponse:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: string
        message:
          description: An I18N string
          type: string
        parameters:
          type: object
          additionalProperties:
            type: string

    AboutResponse:
      type: object
      properties:
        appVersion:
          type: string
        apiVersions:
          type: array
          items:
            type: string

