/*
 * Copyright (c) The One True Way 2021. Apache License 2.0. The authors accept no liability, 0 nada for the use of this software.  It is offered "As IS"  Have fun with it!!
 */
def MASTER_IMAGE_TAG=""
def fullName
def l1Job
def l2Job
def l3Job

pipeline {

    agent {
        kubernetes {
            defaultContainer 'pipeline-runner'
            yaml """
        spec:
          tolerations:
          - key: "cattle.io/os"
            operator: "Equal"
            value: "linux"
            effect: "NoSchedule"
          containers:
          - name: pipeline-runner
            image: docker.repo.eng.netapp.com/masonb/fullstackdev:202101211239
            customWorkspace: /home/jenkins
            command:
            - cat
            tty: true
            volumeMounts:
            - mountPath: /var/run/docker.sock
              name: dockersock
          volumes:
          - name: dockersock
            hostPath:
              path: /var/run/docker.sock

      """
        }
    }
    parameters {
        booleanParam(name: 'PRODUCTION_BUILD', defaultValue: false, description: 'if true, a build number other than date is used')
        string(name: 'TEST_BRANCH', defaultValue: 'main', description: 'L2 Test branch to use')
    }
    environment {
        PATH = "$PATH:/usr/local/go/bin/:/root/go/bin"
    }

    stages {
        stage ('Prepare') {
            steps {
                container('jnlp') {
                    script {
                        def myRepo = checkout scm
                        def gitCommit = "${GIT_COMMIT}"
                        def gitBranch = "${GIT_BRANCH}"
                        def tmpstring = sh(script: 'date +%Y%m%d%H%M', returnStdout: true)
                        sh """#!/bin/bash
                            mkdir -p out
                        """
                    }

                }
            }
        }

        stage ('Build And Unittest') {
            steps {
                container('pipeline-runner') {
                    script{
                        fullName='NatsSync-build/' + String.valueOf(env.BRANCH_NAME)
                        l1Job=build job: fullName,
                                parameters: [
                                        booleanParam (name: 'PRODUCTION_BUILD', value: PRODUCTION_BUILD),
                                ]
                        copyArtifacts(
                                projectName: fullName,
                                selector: specific("${l1Job.number}"),
                                target:"out/",
                                filter: 'out/*/**',
                                flatten: true

                        )
                        MASTER_IMAGE_TAG= sh(script: 'cat out/buildinfo.txt', returnStdout: true)
                        MASTER_IMAGE_TAG = MASTER_IMAGE_TAG.substring(0, tmpstring.length() - 1)
                        echo 'Using Master Image ' + MASTER_IMAGE_TAG
                    }

                }
            }
        }
        stage ('Running and L2') {
            steps {
                container('pipeline-runner') {
                    script{
                        fullName='nats-l2/' + String.valueOf(params.TEST_BRANCH)
                        l2Job=build job: fullName,
                                parameters: [
                                        string(name: 'IMAGE_TAG_INPUT', value: String.valueOf(MASTER_IMAGE_TAG)),
                                ]
                        copyArtifacts(
                                projectName: fullName,
                                selector: specific("${l2Job.number}"),
                                target:"out/",
                                filter: 'out/*/**',
                                flatten: true

                        )

                    }

                }
            }
        }
        stage('publish results') {
            steps {
                container('pipeline-runner') {
                    script {
                        echo 'In Dir ' + pwd()
                        sh """#!/bin/bash
                        go get github.com/jstemmer/go-junit-report
                        go get github.com/t-yuki/gocover-cobertura
                        go get github.com/wadey/gocovmerge
                        export PATH=/root/go/bin:$PATH
                        gocovmerge out/coverage.out out/serverl2_coverage.out  > out/full_coverage.out
                        gocover-cobertura < out/full_coverage.out > out/full_coverage.xml
                        """
                        junit allowEmptyResults: true, testResults: 'out/report_*.xml'
                        cobertura coberturaReportFile: 'out/full_coverage.xml'
                    }
                }
            }
        }
    }
    post {
        always {
            echo 'post'
            archiveArtifacts artifacts: 'out/**/*'
        }
    }
}